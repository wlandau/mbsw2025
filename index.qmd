---
format:
   revealjs:
     incremental: true
     slide-number: true
     footer: "&copy; 2025 Eli Lilly and Company"
     view-distance: 100
     mobile-view-distance: 100
---

##

```{r, include = FALSE, echo = FALSE}
set.seed(0)
suppressPackageStartupMessages({
  library(targets)
})
knitr::opts_chunk$set(
  cache = FALSE,
  comment = "#>",
  fig.width = 10, 
  fig.height = 5,
  echo = TRUE
)
```

<style>
.reveal .tiny {
  display: inline-block;
  font-size: 0.5em;
  line-height: 1.0em;
  vertical-align: top;
}
.reveal .medium {
  display: inline-block;
  font-size: 0.75em;
  line-height: 1.5em;
  vertical-align: top;
}
</style>

<center>
<br>
<h3>Accelerating clinical trial simulation in R with {targets}</h3>
<img src="./images/targets.png" height="400px">
<br>
<h4>Will Landau</h4>
</center>


# Clinical research

## Drug development

![](./images/process.png)

## Clinical trials

![](./images/clinical.png)

## Responsibilities

![](./images/responsibility.png)

## Clinical trial simulation: goals

<center>
<img src="./images/goals.jpg" height="300px">
</center>

* Quantify decision-making ability.
* Compare alternative designs.

## Clinical trial simulation: steps

<center>
<img src="./images/steps.jpg" height="300px">
</center>

1. Simulate virtual patients.
1. Analyze with models.
1. Repeat thousands of times.

## Clinical trial simulation: challenges

<center>
<img src="./images/challenges.jpg" height="300px">
</center>

* Complicated R code.
* Long execution times.
* Frequent changes.

# Illustrative simulation

## Hypothetical trial

<center>
<img src="./images/stethoscope.jpg" height="300px">
</center>

* Extremely rare autoimmune liver disease.
* Phase 2 study, first look at efficacy.
* Novel therapy vs active control.
* Randomize up to 100 patients (1:1).

## Bayesian joint model {.nonincremental}

:::{.fragment}

#### Survival endpoint: years without hospitalization

$$
\begin{aligned}
E(y_i(t)) &= \eta_i(t) \\
&= x_i(t) \beta + b_i
\end{aligned}
$$
:::

:::{.fragment}

#### Longitudinal endpoint: log bilirubin

$$
\begin{aligned}
h_i(t) = h_0(t, \lambda) \exp \left (\eta_i(t) \alpha + \gamma + w_i \color{blue}{\boldsymbol{\theta}} \right )
\end{aligned}
$$

:::

* $w_i$: 1 for treatment, 0 for control.
* $\color{blue}{\boldsymbol{\theta}}$: log hazard ratio of treatment vs control.

## Clinical trial design

<center>
<img src="./images/stethoscope.jpg" height="300px">
</center>

* 10-year accrual period.
* Futility interim at $n$ hospitalizations.
* **Goal: simulate to propose a suitable $n$**.

## Simulate futility

![](./images/bayes.png)

* Simulate 1000 futile trials for $n = 40, 50, 60$.
* A fixed hazard ratio of 1 would be unrealistic.
* Instead, draw from a distribution that captures futility.
* Use the posterior distribution from a historical trial.

## Historical futility data

<center>
<img src="./images/data.jpg" height="300px">
</center>

* Datasets `pbc` and `pbcseq` from the `survival` package.
* Indication: primary biliary cholangitis (PBC).
* Mayo Clinic trial of D-penicillamine vs placebo.
* D-penicillamine did not improve survival.

## Estimated hazard ratio

![](./images/hazard_ratio.png)

# R code

## Functions {.nonincremental}

$$
\Huge
{\color{blue}{y}} = {\color{purple}{f}}({\color{teal}{x}})
$$

> Everything that exists in an object.
> Everything that happens is a function call.
>
>
> — John Chambers

## Top-level R functions

$$
\Huge
{\color{blue}{y}} = {\color{purple}{f}}({\color{teal}{x}})
$$

Function | Description
---|---
`draw_hazard_ratios()` | From historical model.
`trial()` | Simulate one trial rep.
`plot_results()` | Visualize results.

## Example simulation replication

<center>
<img src="./images/r.png" height="200px">
</center>

```{r, eval = FALSE}
trial(hazard_ratio = 1.2, events = 50) # 33 seconds
#> # A tibble: 1 × 5
#>   probability_efficacy mean_hazard_ratio events enrolled
#>                  <dbl>             <dbl>  <dbl>    <dbl>
#> 1              0.00762              1.69     50       69
```

## Example simulation replication

<center>
<img src="./images/r.png" height="200px">
</center>

```{r, eval = FALSE}
trial(hazard_ratio = 0.5, events = 50) # 50 seconds
#> # A tibble: 1 × 5
#>   probability_efficacy mean_hazard_ratio events enrolled
#>                  <dbl>             <dbl>  <dbl>    <dbl>
#> 1                0.924             0.507     50       89
```

# Workflow pitfalls

## Scripted simulation 

:::{.nonincremental}

* Step 1: draw historical hazard ratios.

```{r, eval = FALSE}
hazard_ratio <- draw_hazard_ratios(n_draws = 1000)
```

:::{.fragment}

* Step 2: run simulations.

```{r, eval = FALSE}
results <- expand_grid(hazard_ratio, events = c(40, 50, 60)) |>
  pmap(trial) |>
  list_rbind()
```

:::

:::{.fragment}


* Step 3: plot results.

```{r, eval = FALSE}
plot_results(results)
```

:::

:::


## Typical notebook-based workflow

![](./images/notebook-start.png)

## Messy reality: managing data

![](./images/notebook-end.png)

## Messy reality: managing change

![](./images/notebook-dilemma.png)

# {targets}

## Make-like pipeline tools

<center>
<img src="./images/graph1.png" height="300px">
</center>

* Describe the workflow.
* Run necessary tasks in parallel.
* Skip up-to-date tasks.
* Manage output data.

## A Make-like pipeline tool for R

![](./images/logo-tweet.png)

* Operates in the comfort of your local R session.
* Detects dependencies automatically.
* Integrates with Quarto.
* Runs distributed computing.

## <https://docs.ropensci.org/targets/>

<center>
<a href="https://docs.ropensci.org/targets/"><img src="./images/qr_docs.png"></a>
</center>

# Our pipeline

